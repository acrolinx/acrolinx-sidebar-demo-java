import org.gradle.internal.jvm.Jvm

/*
* Copyright (c) 2016-2017 Acrolinx GmbH
*/

plugins {
	id "com.github.spotbugs" version "2.0.0"
	id "com.diffplug.gradle.swt.nativedeps" version "3.18.1"
	// id "org.openjfx.javafxplugin" version "0.0.8" apply false
	id "com.github.jk1.dependency-license-report" version "1.12"
	id "com.github.johnrengelman.shadow" version "5.2.0"
	id "org.ajoberstar.grgit" version "4.0.1"
}

apply plugin: 'org.ajoberstar.grgit'
ext.grgit = grgit.open(currentDir: rootDir)

println("Current JVM Version " + Jvm.current().getJavaVersion());

allprojects {

	/*tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.memberLevel = JavadocMemberLevel.PUBLIC
	}*/

	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
		}
	}

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	project.version = currentVersion
}

subprojects {

	group 'com.acrolinx'

	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'eclipse'

	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'

	configurations.all {
		// Check for updates every build
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}

	configurations {
		compileSuperFatJar

		// Disable this setting if you don't want to have the JFX dependencies for ALL platforms in a fat jar.
		// By disabling only the dependencies for your current (build hosting) platform will be included (in JRE 11).
		compile.extendsFrom(compileSuperFatJar)
	}

	repositories {
		mavenCentral()
		jcenter()
		maven {
			url "http://maven-eclipse.github.io/maven"
		}
	}

	dependencies {
		compile("com.acrolinx.client:sidebar-sdk:${JAVA_SDK_VERSION}") { changing = true }
		testCompile group: 'junit', name: 'junit', version: '4.+'
	}

	apply plugin: 'com.github.spotbugs'
	spotbugs {
		toolVersion = '3.1.12'
		sourceSets = [sourceSets.main]    // don't check the test code
		ignoreFailures = false    // bug free or it doesn't ship!
		reportsDir = file('build/findbugs')
		effort = 'max'            // min|default|max
		reportLevel = 'medium'        // low|medium|high (low = sensitive to even minor mistakes)
		excludeFilter = file("$rootProject.projectDir/findbugs/excludeFilter.xml")
		omitVisitors = []        // bugs that we want to ignore
	}
}

project(':sidebar_demo_swt') {

	apply plugin: 'application'
	apply plugin: 'com.diffplug.gradle.swt.nativedeps'

	mainClassName = "com.acrolinx.client.sidebar.demo.swt.AcrolinxDemoClientSWT"

	sourceSets.main.resources.srcDir "../../sidebar/swt/src/main/resources";

	javadoc.enabled = false
}

project(':sidebar_demo_swing') {
	apply plugin: 'application'

	if (Integer.parseInt(Jvm.current().getJavaVersion().getMajorVersion()) >= 11) {
		apply plugin: 'org.openjfx.javafxplugin'

		javafx {
			version = "${JFX_VERSION}"
			modules = ["javafx.web", "javafx.swing"]
		}
	}

	mainClassName = "com.acrolinx.client.sidebar.demo.swing.AcrolinxDemoClientSwing"
	jar {
		manifest {
			attributes 'Main-Class': "com.acrolinx.client.sidebar.demo.swing.AcrolinxDemoClientSwing"
		}
		from {
			configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		}
	}

	dependencies {
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-swing:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-swing:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-swing:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:mac"
	}

	javadoc.enabled = false
}

project(':sidebar_demo_jfx') {
	apply plugin: 'application'

	if (Integer.parseInt(Jvm.current().getJavaVersion().getMajorVersion()) >= 11) {
		apply plugin: 'org.openjfx.javafxplugin'
		javafx {
			version = "${JFX_VERSION}"
			modules = ["javafx.web"]
		}
	}
	mainClassName = "com.acrolinx.client.sidebar.demo.jfx.AcrolinxDemoClientJFX"

	javadoc.enabled = false

	jar {
		manifest {
			attributes 'Main-Class': "com.acrolinx.client.sidebar.demo.jfx.Launcher"
		}
		from {
			configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		}
	}

	dependencies {
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:mac"
	}
}

project(':java-sdk-demo-build') {

	apply plugin: 'java-library-distribution'
	apply plugin: 'com.github.johnrengelman.shadow'

	def buildNumber = System.getenv('BUILD_NUMBER') || System.getenv('TRAVIS_BUILD_NUMBER')

	def buildVersion = ((buildNumber != null) ? buildNumber : 123)

	def artifactName = "acrolinx-sidebar-java-demo"
	def fullVersion = "${project.version}-${buildVersion}"

	distTar.enabled = false
	distZip.enabled = false

	dependencies {
		compile project(':sidebar_demo_jfx')
		compile project(':sidebar_demo_swing')
		compile(project(':sidebar_demo_swt')) {
			exclude group: 'eclipse-swt-deps'
		}
	}

	task createJar(type: Jar) {
		manifest {
			attributes(
					"Implementation-Title": "${artifactName}",
					"Implementation-Version": "${fullVersion}",
					"Specification-Title": "${artifactName}",
					"Specification-Version": project.version
			)
		}
	}

	shadowJar {
		archiveFileName = "${artifactName}-${fullVersion}.jar"
		exclude 'META-INF/*.DSA'
		exclude 'META-INF/*.RSA'
		destinationDirectory = file("${buildDir}/lib")
		manifest {
			inheritFrom project.tasks.createJar.manifest
		}
		configurations = [project.configurations.compile]
	}

	task createStartScriptsJFX(type: CreateStartScripts) {
		outputDir = file("${buildDir}/bin/jfx")
		mainClassName = 'com.acrolinx.client.sidebar.demo.jfx.Launcher'
		applicationName = 'acrolinxDemoClientJFX'
		classpath = files("${artifactName}-${fullVersion}.jar")
	}

	task createStartScriptsSwing(type: CreateStartScripts) {
		outputDir = file("${buildDir}/bin/swing")
		mainClassName = 'com.acrolinx.client.sidebar.demo.swing.AcrolinxDemoClientSwing'
		applicationName = 'acrolinxDemoClientSwing'
		classpath = files("${artifactName}-${fullVersion}.jar")
	}

	task createStartScriptsSWT(type: CreateStartScripts) {
		outputDir = file("${buildDir}/bin/swt")
		mainClassName = 'com.acrolinx.client.sidebar.demo.swt.AcrolinxDemoClientSWT'
		applicationName = 'acrolinxDemoClientSWT'
		classpath = files("*")
	}

	task zipDist(type: Zip) {

		delete fileTree('../dist') {
			include '*.zip'
		}

		try {
			grgit.remove(patterns: ['dist'])
		} catch (Exception e) {
			// DO nothing
		}


		def baseDir = "${artifactName}-${fullVersion}.zip"
		archiveFileName = baseDir

		destinationDirectory = file('../dist')
		into(baseDir) {
			into("lib") {
				from(shadowJar)
			}
		}
		into(baseDir) {
			into("bin") {
				from(createStartScriptsJFX)
			}
		}
		into(baseDir) {
			into("bin") {
				from(createStartScriptsSwing)
			}
		}
		into(baseDir) {
			into("bin") {
				from(createStartScriptsSWT)
			}
		}
		into(baseDir) {
			from("../LICENSE")
		}
	}

	artifacts {
		archives zipDist
	}

	task tagAndReleaseIfNewVersion(dependsOn: zipDist) {
		doLast {
			def hasOldReleaseVersion = grgit.tag.list().find { it.getName() == "release-${currentVersion}" }
			if (!fullVersion.contains('SNAPSHOT') && !hasOldReleaseVersion) {
				grgit.commit(message: "Release version ${currentVersion}")
				grgit.push(force: true)
				grgit.tag.add(name: "release-${currentVersion}", message: "Releasing ${currentVersion}")
				grgit.push(tags: true)
			}

		}
	}
}
