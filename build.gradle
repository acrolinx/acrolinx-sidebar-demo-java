import org.gradle.internal.jvm.Jvm
import org.gradle.internal.os.OperatingSystem

plugins {
	id 'java'
	id 'jacoco'
	id 'org.openjfx.javafxplugin' version '0.0.14' apply false
	id 'com.github.jk1.dependency-license-report' version '2.5'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
	id 'org.ajoberstar.grgit' version '4.1.1'
	id 'org.sonarqube' version '4.0.0.2929'
	id 'com.diffplug.spotless' version '6.13.0'
}

apply plugin: 'org.ajoberstar.grgit'
ext.grgit = grgit.open(currentDir: rootDir)

switch ( OperatingSystem.current() ) {
	case OperatingSystem.WINDOWS:
		project.ext.swtNatives = "org.eclipse.swt.win32.win32.x86_64"
		break
	case OperatingSystem.LINUX:
		project.ext.swtNatives = "org.eclipse.swt.gtk.linux.x86_64"
		break
	case OperatingSystem.MAC_OS:
		project.ext.swtNatives = "org.eclipse.swt.cocoa.macosx.x86_64"
		break
}

allprojects {
	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
		}
	}

	project.version = currentVersion
}

repositories {
	mavenCentral()
}

subprojects {
	group 'com.acrolinx'

	apply plugin: 'java'
	apply plugin: 'com.diffplug.spotless'

	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'

	configurations.all {
		// Check for updates every build
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
	}

	configurations {
		compileSuperFatJar

		// Disable this setting if you don't want to have the JFX dependencies for ALL platforms in a fat jar.
		// By disabling only the dependencies for your current (build hosting) platform will be included (in JRE 11).
		implementation.extendsFrom(compileSuperFatJar)
	}

	repositories {
		mavenCentral()
	}

	configurations.all {
		resolutionStrategy {
			dependencySubstitution {
				// The maven property ${osgi.platform} is not handled by Gradle
				// so we replace the dependency, using the osgi platform from the project settings
				def os = System.getProperty("os.name").toLowerCase()
				if (os.contains("windows")) {
					substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') using module("org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:$SWT_VERSION")
				}
				else if (os.contains("linux")) {
					substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') using module("org.eclipse.platform:org.eclipse.swt.gtk.linux.x86_64:$SWT_VERSION")
				}
				else if (os.contains("mac")) {
					substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') using module("org.eclipse.platform:org.eclipse.swt.cocoa.macosx.x86_64:$SWT_VERSION")
				}
			}
		}
	}

	dependencies {
		implementation "com.acrolinx.client:sidebar-sdk:${JAVA_SDK_VERSION}"
	}

	java {
		sourceCompatibility = JavaVersion.VERSION_1_8
		withJavadocJar()
		withSourcesJar()
	}

	spotless {
		java {
			importOrder()
			removeUnusedImports()
			googleJavaFormat()
			licenseHeader '/* Copyright (c) $YEAR-present Acrolinx GmbH */'
		}
		format 'misc', {
			target '*.gradle', '*.md', '.gitignore', '*.sh'
	
			indentWithTabs()
			trimTrailingWhitespace()
			endWithNewline()
		}
	}
}

project(':sidebar-demo-swt') {
	apply plugin: 'application'

	application {
		mainClass = "com.acrolinx.client.sidebar.demo.swt.AcrolinxDemoClientSwt"
	}

	sourceSets.main.resources.srcDir "../../sidebar/swt/src/main/resources";
	jar {
		duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
		manifest {
			attributes 'Main-Class': "com.acrolinx.client.sidebar.demo.swt.AcrolinxDemoClientSwt"
		}
		from {
			configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		}
	}

	dependencies {
		compileSuperFatJar "org.eclipse.platform:$swtNatives:$SWT_VERSION"
	}
}

project(':sidebar-demo-swing') {
	apply plugin: 'application'

	if (Integer.parseInt(Jvm.current().getJavaVersion().getMajorVersion()) >= 11) {
		apply plugin: 'org.openjfx.javafxplugin'

		javafx {
			version = "${JFX_VERSION}"
			modules = ["javafx.web", "javafx.swing"]
		}
	}

	application {
		mainClass = "com.acrolinx.client.sidebar.demo.swing.AcrolinxDemoClientSwing"
	}

	jar {
		duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
		manifest {
			attributes 'Main-Class': "com.acrolinx.client.sidebar.demo.swing.AcrolinxDemoClientSwing"
		}
		from {
			configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		}
	}

	dependencies {
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-swing:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-swing:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-swing:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:mac"
	}
}

project(':sidebar-demo-jfx') {
	apply plugin: 'application'

	if (Integer.parseInt(Jvm.current().getJavaVersion().getMajorVersion()) >= 11) {
		apply plugin: 'org.openjfx.javafxplugin'
		javafx {
			version = "${JFX_VERSION}"
			modules = ["javafx.web"]
		}
	}

	application {
		mainClass = "com.acrolinx.client.sidebar.demo.jfx.AcrolinxDemoClientJfx"
	}

	jar {
		duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
		manifest {
			attributes 'Main-Class': "com.acrolinx.client.sidebar.demo.jfx.Launcher"
		}
		from {
			configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
		}
	}

	dependencies {
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-base:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-web:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-graphics:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-controls:${JFX_VERSION}:mac"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:win"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:linux"
		compileSuperFatJar "org.openjfx:javafx-media:${JFX_VERSION}:mac"
	}
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
	}
}

sonar {
	properties {
		property "sonar.projectKey", "acrolinx_acrolinx-sidebar-demo-java"
		property "sonar.organization", "acrolinx"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}
