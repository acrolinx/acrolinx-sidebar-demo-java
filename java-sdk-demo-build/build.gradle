plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.4'
}

apply plugin: 'java-library-distribution'

def buildNumber = System.getenv('BUILD_NUMBER');

def buildVersion = buildNumber != null ? buildNumber : 123

def artifactName = "acrolinx-sidebar-java-sdk"
def fullVersion = "${project.version}-${buildVersion}"

distTar.enabled = false
distZip.enabled = false

dependencies {
    compile project(':sidebar_demo_jfx')
    compile project(':sidebar_demo_swing')
    compile(project(':sidebar_demo_swt')) {
        exclude group: 'eclipse-swt-deps'
    }
}

shadowJar {
    archiveName = "${artifactName}-${fullVersion}.jar"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    destinationDir = file("${buildDir}/lib")
}

task createStartScriptsJFX(type: CreateStartScripts) {
    outputDir = file("${buildDir}/bin/jfx")
    mainClassName = 'com.acrolinx.client.sidebar.demo.jfx.AcrolinxDemoClientJFX'
    applicationName = 'acrolinxDemoClientJFX'
    classpath = files("${artifactName}-${fullVersion}.jar")
}

task createStartScriptsSwing(type: CreateStartScripts) {
    outputDir = file("${buildDir}/bin/swing")
    mainClassName = 'com.acrolinx.client.sidebar.demo.swing.AcrolinxDemoClientSwing'
    applicationName = 'acrolinxDemoClientSwing'
    classpath = files("${artifactName}-${fullVersion}.jar")
}

task createStartScriptsSWT(type: CreateStartScripts) {
    outputDir = file("${buildDir}/bin/swt")
    mainClassName = 'com.acrolinx.client.sidebar.demo.swt.AcrolinxDemoClientSWT'
    applicationName = 'acrolinxDemoClientSWT'
    classpath = files("*")
}

task zipDist(type: Zip) {

    delete fileTree('../dist') {
        include '*.zip'
    }

    grgit.remove(patterns: ['dist'])

    def baseDir = "${artifactName}-${fullVersion}.zip"
    archiveName = baseDir

    destinationDir = file('../dist')
    into(baseDir) {
        into("lib") {
            from(shadowJar)
        }
    }
    into(baseDir) {
        into("bin") {
            from(createStartScriptsJFX)
        }
    }
    into(baseDir) {
        into("bin") {
            from(createStartScriptsSwing)
        }
    }
    into(baseDir) {
        into("bin") {
            from(createStartScriptsSWT)
        }
    }
    into(baseDir) {
        from("../LICENSE")
    }
    into(baseDir) {
        into("dependency-licenses") {
            from("${buildDir}/dependency-licenses")
        }
    }
}

zipDist.dependsOn(':sidebar_common:generateThirdPartyLibraryReport')

artifacts {
    archives zipDist
}

task distributeAndRelease(dependsOn: zipDist) {
    doLast {
        def hasOldReleaseVersion = grgit.tag.list().find { it.getName() == "release-${currentVersion}" }
        if (!fullVersion.contains('SNAPSHOT') && !hasOldReleaseVersion) {
            grgit.add(patterns: ['dist'])
            grgit.commit(message: "Release version ${currentVersion}")
            grgit.push(force: true)
            grgit.tag.add(name: "release-${currentVersion}", message: "Releasing ${currentVersion}")
            grgit.push(tags: true)
        }
    }
}